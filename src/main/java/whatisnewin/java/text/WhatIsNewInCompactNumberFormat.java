package whatisnewin.java.text;

import java.text.CompactNumberFormat;
import java.text.DecimalFormatSymbols;
import java.text.AttributedCharacterIterator;
import java.text.FieldPosition;
import java.text.ParsePosition;
import java.math.RoundingMode;

/**
 * This source file was generated by WhatIsNewInJava.<br>
 *
 * This class provides an example call to each method in class {@link CompactNumberFormat}
 * that were newly introduced in Java version 12.<br>
 *
 * {@link CompactNumberFormat} is a completely new class.
 * @since 12
 * @see CompactNumberFormat
 */
public final class WhatIsNewInCompactNumberFormat
{
  /**
   * Example call to new constructor {@link CompactNumberFormat#CompactNumberFormat(String, DecimalFormatSymbols, String[])}.
   * @since 12
   * @see CompactNumberFormat#CompactNumberFormat(String, DecimalFormatSymbols, String[])
   */
  public WhatIsNewInCompactNumberFormat(String decimalPattern, DecimalFormatSymbols symbols, String[] compactPatterns)
  {
    CompactNumberFormat testee = new CompactNumberFormat(decimalPattern, symbols, compactPatterns);
  }

  /**
   * Example call to new method {@link CompactNumberFormat#setGroupingUsed(boolean)}.
   * @since 12
   * @see CompactNumberFormat#setGroupingUsed(boolean)
   */
  public void setGroupingUsed(boolean newValue)
  {
    CompactNumberFormat testee = $$$();

    testee.setGroupingUsed(newValue);
  }

  /**
   * Example call to new method {@link CompactNumberFormat#getGroupingSize()}.
   * @since 12
   * @see CompactNumberFormat#getGroupingSize()
   */
  public int getGroupingSize()
  {
    CompactNumberFormat testee = $$$();

    int result = testee.getGroupingSize();
    return result;
  }

  /**
   * Example call to new method {@link CompactNumberFormat#setParseBigDecimal(boolean)}.
   * @since 12
   * @see CompactNumberFormat#setParseBigDecimal(boolean)
   */
  public void setParseBigDecimal(boolean newValue)
  {
    CompactNumberFormat testee = $$$();

    testee.setParseBigDecimal(newValue);
  }

  /**
   * Example call to new method {@link CompactNumberFormat#formatToCharacterIterator(Object)}.
   * @since 12
   * @see CompactNumberFormat#formatToCharacterIterator(Object)
   */
  public AttributedCharacterIterator formatToCharacterIterator(Object obj)
  {
    CompactNumberFormat testee = $$$();

    AttributedCharacterIterator result = testee.formatToCharacterIterator(obj);
    return result;
  }

  /**
   * Example call to new method {@link CompactNumberFormat#setGroupingSize(int)}.
   * @since 12
   * @see CompactNumberFormat#setGroupingSize(int)
   */
  public void setGroupingSize(int newValue)
  {
    CompactNumberFormat testee = $$$();

    testee.setGroupingSize(newValue);
  }

  /**
   * Example call to new method {@link CompactNumberFormat#isGroupingUsed()}.
   * @since 12
   * @see CompactNumberFormat#isGroupingUsed()
   */
  public boolean isGroupingUsed()
  {
    CompactNumberFormat testee = $$$();

    boolean result = testee.isGroupingUsed();
    return result;
  }

  /**
   * Example call to new method {@link CompactNumberFormat#setMaximumIntegerDigits(int)}.
   * @since 12
   * @see CompactNumberFormat#setMaximumIntegerDigits(int)
   */
  public void setMaximumIntegerDigits(int newValue)
  {
    CompactNumberFormat testee = $$$();

    testee.setMaximumIntegerDigits(newValue);
  }

  /**
   * Example call to new method {@link CompactNumberFormat#format(Object, StringBuffer, FieldPosition)}.
   * @since 12
   * @see CompactNumberFormat#format(Object, StringBuffer, FieldPosition)
   */
  public StringBuffer format(Object number, StringBuffer toAppendTo, FieldPosition fieldPosition)
  {
    CompactNumberFormat testee = $$$();

    StringBuffer result = testee.format(number, toAppendTo, fieldPosition);
    return result;
  }

  /**
   * Example call to new method {@link CompactNumberFormat#format(double, StringBuffer, FieldPosition)}.
   * @since 12
   * @see CompactNumberFormat#format(double, StringBuffer, FieldPosition)
   */
  public StringBuffer format(double number, StringBuffer result, FieldPosition fieldPosition)
  {
    CompactNumberFormat testee = $$$();

    StringBuffer result1 = testee.format(number, result, fieldPosition);
    return result1;
  }

  /**
   * Example call to new method {@link CompactNumberFormat#format(long, StringBuffer, FieldPosition)}.
   * @since 12
   * @see CompactNumberFormat#format(long, StringBuffer, FieldPosition)
   */
  public StringBuffer format(long number, StringBuffer result, FieldPosition fieldPosition)
  {
    CompactNumberFormat testee = $$$();

    StringBuffer result1 = testee.format(number, result, fieldPosition);
    return result1;
  }

  /**
   * Example call to new method {@link CompactNumberFormat#parse(String, ParsePosition)}.
   * @since 12
   * @see CompactNumberFormat#parse(String, ParsePosition)
   */
  public Number parse(String text, ParsePosition pos)
  {
    CompactNumberFormat testee = $$$();

    Number result = testee.parse(text, pos);
    return result;
  }

  /**
   * Example call to new method {@link CompactNumberFormat#setMinimumFractionDigits(int)}.
   * @since 12
   * @see CompactNumberFormat#setMinimumFractionDigits(int)
   */
  public void setMinimumFractionDigits(int newValue)
  {
    CompactNumberFormat testee = $$$();

    testee.setMinimumFractionDigits(newValue);
  }

  /**
   * Example call to new method {@link CompactNumberFormat#getRoundingMode()}.
   * @since 12
   * @see CompactNumberFormat#getRoundingMode()
   */
  public RoundingMode getRoundingMode()
  {
    CompactNumberFormat testee = $$$();

    RoundingMode result = testee.getRoundingMode();
    return result;
  }

  /**
   * Example call to new method {@link CompactNumberFormat#isParseBigDecimal()}.
   * @since 12
   * @see CompactNumberFormat#isParseBigDecimal()
   */
  public boolean isParseBigDecimal()
  {
    CompactNumberFormat testee = $$$();

    boolean result = testee.isParseBigDecimal();
    return result;
  }

  /**
   * Example call to new method {@link CompactNumberFormat#setMinimumIntegerDigits(int)}.
   * @since 12
   * @see CompactNumberFormat#setMinimumIntegerDigits(int)
   */
  public void setMinimumIntegerDigits(int newValue)
  {
    CompactNumberFormat testee = $$$();

    testee.setMinimumIntegerDigits(newValue);
  }

  /**
   * Example call to new method {@link CompactNumberFormat#setParseIntegerOnly(boolean)}.
   * @since 12
   * @see CompactNumberFormat#setParseIntegerOnly(boolean)
   */
  public void setParseIntegerOnly(boolean value)
  {
    CompactNumberFormat testee = $$$();

    testee.setParseIntegerOnly(value);
  }

  /**
   * Example call to new method {@link CompactNumberFormat#setMaximumFractionDigits(int)}.
   * @since 12
   * @see CompactNumberFormat#setMaximumFractionDigits(int)
   */
  public void setMaximumFractionDigits(int newValue)
  {
    CompactNumberFormat testee = $$$();

    testee.setMaximumFractionDigits(newValue);
  }

  /**
   * Example call to new method {@link CompactNumberFormat#isParseIntegerOnly()}.
   * @since 12
   * @see CompactNumberFormat#isParseIntegerOnly()
   */
  public boolean isParseIntegerOnly()
  {
    CompactNumberFormat testee = $$$();

    boolean result = testee.isParseIntegerOnly();
    return result;
  }

  /**
   * Example call to new method {@link CompactNumberFormat#setRoundingMode(RoundingMode)}.
   * @since 12
   * @see CompactNumberFormat#setRoundingMode(RoundingMode)
   */
  public void setRoundingMode(RoundingMode roundingMode)
  {
    CompactNumberFormat testee = $$$();

    testee.setRoundingMode(roundingMode);
  }

  private CompactNumberFormat $$$()
  {
    return null;
  }
}
