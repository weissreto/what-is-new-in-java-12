package whatisnewin.java.lang.constant;

import java.lang.constant.ClassDesc;

/**
 * This source file was generated by WhatIsNewInJava<br>
 *
 * This class provides an example call to each method in class {@link ClassDesc}
 * that were newly introduced in Java versions 12.<br>
 *
 * {@link ClassDesc} is a completely new class
 * @since 12
 * @see ClassDesc
 */
public final class WhatIsNewInClassDesc
{
  /**
   * Example call to new method {@link ClassDesc#of}
   * @since 12
   * @see ClassDesc#of
   */
  public static ClassDesc of(String name)
  {
    ClassDesc result = ClassDesc.of(name);
    return result;
  }

  /**
   * Example call to new method {@link ClassDesc#of}
   * @since 12
   * @see ClassDesc#of
   */
  public static ClassDesc of(String packageName, String className)
  {
    ClassDesc result = ClassDesc.of(packageName, className);
    return result;
  }

  /**
   * Example call to new method {@link ClassDesc#isPrimitive}
   * @since 12
   * @see ClassDesc#isPrimitive
   */
  public boolean isPrimitive()
  {
    ClassDesc testee = $$$();

    boolean result = testee.isPrimitive();
    return result;
  }

  /**
   * Example call to new method {@link ClassDesc#ofDescriptor}
   * @since 12
   * @see ClassDesc#ofDescriptor
   */
  public static ClassDesc ofDescriptor(String descriptor)
  {
    ClassDesc result = ClassDesc.ofDescriptor(descriptor);
    return result;
  }

  /**
   * Example call to new method {@link ClassDesc#isArray}
   * @since 12
   * @see ClassDesc#isArray
   */
  public boolean isArray()
  {
    ClassDesc testee = $$$();

    boolean result = testee.isArray();
    return result;
  }

  /**
   * Example call to new method {@link ClassDesc#packageName}
   * @since 12
   * @see ClassDesc#packageName
   */
  public String packageName()
  {
    ClassDesc testee = $$$();

    String result = testee.packageName();
    return result;
  }

  /**
   * Example call to new method {@link ClassDesc#displayName}
   * @since 12
   * @see ClassDesc#displayName
   */
  public String displayName()
  {
    ClassDesc testee = $$$();

    String result = testee.displayName();
    return result;
  }

  /**
   * Example call to new method {@link ClassDesc#arrayType}
   * @since 12
   * @see ClassDesc#arrayType
   */
  public ClassDesc arrayType()
  {
    ClassDesc testee = $$$();

    ClassDesc result = testee.arrayType();
    return result;
  }

  /**
   * Example call to new method {@link ClassDesc#arrayType}
   * @since 12
   * @see ClassDesc#arrayType
   */
  public ClassDesc arrayType(int rank)
  {
    ClassDesc testee = $$$();

    ClassDesc result = testee.arrayType(rank);
    return result;
  }

  /**
   * Example call to new method {@link ClassDesc#componentType}
   * @since 12
   * @see ClassDesc#componentType
   */
  public ClassDesc componentType()
  {
    ClassDesc testee = $$$();

    ClassDesc result = testee.componentType();
    return result;
  }

  /**
   * Example call to new method {@link ClassDesc#isClassOrInterface}
   * @since 12
   * @see ClassDesc#isClassOrInterface
   */
  public boolean isClassOrInterface()
  {
    ClassDesc testee = $$$();

    boolean result = testee.isClassOrInterface();
    return result;
  }

  /**
   * Example call to new method {@link ClassDesc#nested}
   * @since 12
   * @see ClassDesc#nested
   */
  public ClassDesc nested(String nestedName)
  {
    ClassDesc testee = $$$();

    ClassDesc result = testee.nested(nestedName);
    return result;
  }

  /**
   * Example call to new method {@link ClassDesc#nested}
   * @since 12
   * @see ClassDesc#nested
   */
  public ClassDesc nested(String firstNestedName, String[] moreNestedNames)
  {
    ClassDesc testee = $$$();

    ClassDesc result = testee.nested(firstNestedName, moreNestedNames);
    return result;
  }

  /**
   * Example call to new method {@link ClassDesc#descriptorString}
   * @since 12
   * @see ClassDesc#descriptorString
   */
  public String descriptorString()
  {
    ClassDesc testee = $$$();

    String result = testee.descriptorString();
    return result;
  }

  private ClassDesc $$$()
  {
    return null;
  }
}
